// import java.util.*;

// class Solution {
//     public boolean isSafe(int row, int col, char[][] board) {
//         // horizontal
//         for (int j = 0; j < board.length; j++) {
//             if (board[row][j] == 'Q') {
//                 return false;
//             }
//         }
//         // vertical
//         for (int i = 0; i < board.length; i++) {
//             if (board[i][col] == 'Q') {
//                 return false;
//             }
//         }
//         // upper left
//         int r = row;
//         for (int c = col; c >= 0 && r >= 0; c--, r--) {
//             if (board[r][c] == 'Q') {
//                 return false;
//             }
//         }
//         // upper right
//         r = row;
//         for (int c = col; c < board.length && r >= 0; c++, r--) {
//             if (board[r][c] == 'Q') {
//                 return false;
//             }
//         }
//         // bottom left
//         r = row;
//         for (int c = col; c >= 0 && r < board.length; c--, r++) {
//             if (board[r][c] == 'Q') {
//                 return false;
//             }
//         }
//         // bottom right
//         for (int c = col; c < board.length && r < board.length; c++, r++) {
//             if (board[r][c] == 'Q') {
//                 return false;
//             }
//         }
//         return true;
//     }

//     public void saveBoard(char[][] board, List<List<String>> allBoards) {
//         String row = "";
//         List<String> newBoard = new ArrayList<>();
//         for (int i = 0; i < board.length; i++) {
//             row = "";
//             for (int j = 0; j < board.length; j++) {
//                 if (board[i][j] == 'Q') {
//                     row += 'Q';
//                 } else {
//                     row += '.';
//                 }
//             }
//             newBoard.add(row);
//         }
//         allBoards.add(newBoard);
//     }

//     public void helper(char[][] board, List<List<String>> allBoards, int col) {
//         if (col == board.length) {
//             saveBoard(board, allBoards);
//             return;
//         }
//         for (int row = 0; row < board.length; row++) {
//             if (isSafe(row, col, board)) {
//                 board[row][col] = 'Q';
//                 helper(board, allBoards, col + 1);
//                 board[row][col] = '.';
//             }

//         }

//     }

//     public List<List<String>> solveNQueens(int n) {
//         List<List<String>> allBoards = new ArrayList<>();
//         char[][] board = new char[n][n];
//         helper(board, allBoards, 0);
//         return allBoards;
//     }
// }

// public class N_Queen {
//     public static void main(String[] args) {
//         Solution obj = new Solution();
//         int n = 4;
//         List<List<String>> solutions = obj.solveNQueens(n);

//         for (List<String> obj1 : solutions) {
//             // System.out.println("");
//             for (String row : obj1) {
//                 System.out.println(row);
//             }
//         }
//     }
// }

import java.util.ArrayList;
import java.util.List;

public class N_Queen {
    // Size of the chessboard
    private static final int N = 8;

    public boolean isSafe(int row, int col, int[][] board) {
        // Check the column on the left
        for (int i = 0; i < col; i++) {
            if (board[row][i] == 1) {
                return false;
            }
        }

        // Check upper diagonal on the left
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        // Check lower diagonal on the left
        for (int i = row, j = col; i < N && j >= 0; i++, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        return true;
    }

    public boolean solveNQueens(int[][] board, int col) {
        // If all Queens are placed
        if (col >= N) {
            return true;
        }

        // Try to place Queen in all rows of the current column
        for (int i = 0; i < N; i++) {
            if (isSafe(i, col, board)) {
                // Place the Queen
                board[i][col] = 1;

                // Recur to place rest of the Queens
                if (solveNQueens(board, col + 1)) {
                    return true;
                }

                // If placing Queen in this position doesn't lead to a solution, backtrack
                board[i][col] = 0;
            }
        }

        // If no row can lead to a solution, return false
        return false;
    }

    public void printBoard(int[][] board) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        N_Queen solver = new N_Queen();
        int[][] board = new int[N][N];

        // Place the first Queen (e.g., at position (0, 0))
        board[0][0] = 1;

        if (solver.solveNQueens(board, 1)) {
            System.out.println("Solution exists. The final 8-Queens matrix is:");
            solver.printBoard(board);
        } else {
            System.out.println("No solution exists.");
        }
    }
}

//Time - O(N^N)
//Space - O(N*N) because of the NxN chessboard size
